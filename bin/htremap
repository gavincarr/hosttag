#!/usr/bin/ruby
#
# Quick and dirty script to remap all_* keys to the new naming convention:
# - all_{hosts,tags} => all_{hosts,tags}_full,
# - all_{hosts,tags}_noskip => all_{hosts,tags}
#

require 'optparse'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'hosttag/server'
require 'hosttag'
include Hosttag

defaults = {}

def die(error)
  puts error
  exit 1
end

def parse_options(options)
  opts = OptionParser.new
  opts.banner = "Usage: htimport [options]"
  opts.on('-?', '-h', '--help') do
    puts opts
    exit
  end
  opts.on('-h', '--help', '-?', 'Show this usage information') do
    die(opts)
  end
  opts.on('-s=ARG', '--server=ARG', String, 'Server hostname to connect to. Default: hosttag') do |val|
    options[:server] = val
  end
  opts.on('-p=ARG', '--port=ARG', Integer, 'Server port to connect to. Default: 6379') do |val|
    options[:port] = val
  end
  opts.on('--ns=STR', '--namespace=STR', String, 'Namespace from which to dump hosttag data. Default: hosttag') do |val|
    options[:namespace] = val
  end

  # Parse options
  begin
    args = opts.parse(ARGV) 
  rescue => e
    puts "Error: " << e
    usage(opts)
  end

  if args.length > 0
    puts "Error: unexpected arguments '#{args}'"
    usage(opts)
  end

  return options
end

def usage(opts)
  puts opts
  exit
end

# ----------------------------------------------------------------------------
# Main

options = parse_options( defaults )
r = Hosttag::Server.new(options)

key = r.get_key('all_hosts_noskip')
if not r.exists(key)
  puts "No 'all_hosts_noskip' key found - aborting"
  exit 1
end

%w{all_hosts all_tags}.each do |all_x|
  key = r.get_key(all_x)
  return unless r.exists(key)
  members = r.smembers(key)
  new_key = r.get_key("#{all_x}_full")
  members.each { |m| r.sadd(new_key, m) }
  r.del(key)
end

%w{all_hosts_noskip all_tags_noskip}.each do |all_x|
  key = r.get_key(all_x)
  return unless r.exists(key)
  members = r.smembers(key)
  all_x_new = all_x.sub(/_noskip$/, '')
  new_key = r.get_key(all_x_new)
  members.each { |m| r.sadd(new_key, m) }
  r.del(key)
end

