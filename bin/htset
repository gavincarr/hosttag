#!/usr/bin/ruby
#
# Hosttag update client, redis version
#
# Usage:
#   htset <host1> [<host2> ...] <tag> [<tag2> ...]
#

require 'optparse'
require 'ftools'
require 'pp'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'hosttag'
include Hosttag

# ------------------------------------------------------------------------------
# Subroutines

def die(error)
  puts error
  exit 1
end

def parse_options(me)
  options = { :all => 0 }
  opts = OptionParser.new
  opts.banner = "Usage: #{me} [options] <host> [<host2> ...] <tag> [<tag2>...]"
  opts.on('-?', '-h', '--help') do
    puts opts
    exit
  end
  opts.on('-h', '--help', '-?', 'Show this usage information') do
    die(opts)
  end
  opts.on('-A', '--all', '(htdel) Delete all tags from hosts') do
    options[:all] = 1
  end
  opts.on('-y', '--autoconfirm', "(htdel) Don't ask for confirmation on delete all operations") do
    options[:autoconfirm] = 1
  end
  opts.on('-H', '--host', '--hosts', 'Treat unrecognised elements as hosts') do
    options[:host_mode] = 1
  end
  opts.on('-T', '--tag', '--tags', 'Treat unrecognised elements as tags') do
    options[:tag_mode] = 1
  end
  opts.on('--ns=STR', '--namespace=STR', String, 'Namespace into which we load hosttag data. Default: hosttag') do |val|
    options[:namespace] = val
  end
  opts.on('-s=ARG', '--server=ARG', String, 'Server hostname to connect to') do |val|
    options[:server] = val
  end
  opts.on('-p=ARG', '--port=ARG', Integer, 'Server port to connect to') do |val|
    options[:port] = val
  end
  opts.on('-v', '--verbose', 'Verbose output') do
    options[:verbose] = true
  end

  # Parse options
  begin
    args = opts.parse(ARGV) 
  rescue => e
    die(opts) 
  end

  if args.length < 2 and options[:all] != 1
    die(opts) 
  end
  if options[:all] == 1 and me == 'htset'
    warn "Error: --all not available with htset"
    die(opts)
  end 
  if options[:host_mode] and options[:tag_mode]
    warn "Error: --host and --tag options are mutually exclusive"
    die(opts)
  end

  return options, args
end

# Classify args into hosts, tags, and uncertain buckets
def classify_args(args, options)
  results = { :host => [], :tag => [], :uncertain => [] }
  verbose = options[:verbose]

  # First arg must be host, and last tag, by definition
  results[:host].push(args.shift)
  last_tag = args.pop

  # Classify remainder by doing lookups
  while a = args.shift do
    begin
      tags = hosttag_lookup_hosts(a, options)
      if tags.length > 0
        # if 'a' is a valid host, then everything before 'a' must be too
        if results[:uncertain].length > 0
          results[:uncertain].each { |u| results[:host].push(u) }
          results[:uncertain] = []
        end
        results[:host].push(a)
      end
    rescue
      # 'a' is not a known host, check if a tag
      begin
        hosts = hosttag_lookup_tags(a, options)
        if hosts.length > 0
          results[:tag].push(a)
          # If 'a' is a valid tag, then everything after 'a' must be too
          args.each { |a| results[:tag].push(a) }
        end
      rescue
        # 'a' is not a known host or tag, add to uncertain list
        results[:uncertain].push(a)
      end
    end
  end

  results[:tag].push(last_tag)

  return results
end

# ------------------------------------------------------------------------------
# Main

mode = $0.sub(/^.*\//, '')

options, args = parse_options(mode)

# Normal mode
if (options[:all] == 0)
  results = classify_args(args, options)
  if options[:verbose] 
    print "+ results: "
    pp results 
  end

  if results[:uncertain].length > 0
    # --hosts: treat unknown elements as hosts
    if options[:host_mode]
      results[:host].push(*results[:uncertain])
    elsif options[:tag_mode]
      results[:tag].push(*results[:uncertain])
    else
      # TODO: do something useful here - ask the user?
      die("Error: can't auto-classify '#{results[:uncertain].join(',')}' - aborting")
    end
  end

  if (mode == 'htdel') 
    hosttag_delete_tags(results[:host], results[:tag], options)
  else
    hosttag_add_tags(results[:host], results[:tag], options)
  end

# htdel --all mode
else
  hosttag_delete_all_tags(args, options)

end

