#!/usr/bin/ruby
#
# Import host tags from /etc/hosttag into redis
#

require 'optparse'
require 'ftools'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'hosttag/server'

defaults = { :datadir => '/etc/hosttag' }

# ------------------------------------------------------------------------------
# Subroutines

def die(error)
  puts error
  exit 1
end

def parse_options(options)
  opts = OptionParser.new
  opts.banner = "Usage: htimport [options]"
  opts.on('-?', '-h', '--help') do
    puts opts
    exit
  end
  opts.on('-h', '--help', '-?', 'Show this usage information') do
    die(opts)
  end
  opts.on('-s=ARG', '--server=ARG', String, 'Server hostname to connect to. Default: hosttag') do |val|
    options[:server] = val
  end
  opts.on('-p=ARG', '--port=ARG', Integer, 'Server port to connect to. Default: 6379') do |val|
    options[:port] = val
  end
  opts.on('--delete', 'Delete mode - remove all hosttags from redis before importing') do
    options[:delete] = true
  end
  opts.on('--datadir=DIR', String, 'Data directory from which to load data. Default: /etc/hosttag') do |val|
    options[:datadir] = val
  end
  opts.on('--ns=STR', '--namespace=STR', String, 'Namespace into which we load hosttag data. Default: hosttag') do |val|
    options[:namespace] = val
  end
  opts.on('-v', '--verbose', 'Verbose output') do
    options[:verbose] = true
  end

  # Parse options
  begin
    args = opts.parse(ARGV) 
  rescue => e
    puts "Error: " << e
    usage(opts)
  end

  if args.length > 0
    puts "Error: unexpected arguments '#{args}'"
    usage(opts)
  end

  return options
end

def usage(opts)
  puts opts
  exit
end

def load_tags(options)
  tag_hash = {}
  skip_hosts_hash = {}

  Dir.chdir(options[:datadir])
  Dir.glob("*").each do |host|
    next if not File.directory?(host)

    tag_hash[host] = []
    Dir.glob("#{host}/*").each do |tag_path|
      tag = File.basename(tag_path)
      tag_hash[host].push(tag)
      skip_hosts_hash[host] = 1 if tag == 'SKIP'
    end
  end

  return tag_hash, skip_hosts_hash
end

def deep_invert(hash)
  inverted = {}
  hash.each do |k, v|
    if v.is_a? Array
      v.each do |i|
        inverted[i] ||= []
        inverted[i].push(k)
      end
    else
      inverted[v] ||= []
      inverted[v].push(k)
    end
  end
  inverted
end

def redis_delete_hosttag_keys(r)
  r.keys(r.get_key("*")).each { |k| r.del(k) }
end

def write_hash_to_redis(r, type, tag_hash, options)
  tag_hash.each do |key, val_array|
    redis_key = r.get_key(type, key)
    val_array.each do |val| 
      next if r.sismember(redis_key, val)
      puts "+ #{type}/#{key}/#{val}" if options[:verbose]
      r.sadd(redis_key, val) 
    end
  end
end

# ----------------------------------------------------------------------------
# Main

options, args = parse_options( defaults )

r = Hosttag::Server.new(options)

# If in 'delete' mode, delete all hosttag keys
if options[:delete]
  redis_delete_hosttag_keys(r)
end

# Load host => tag mappings from disk
host_tag_hash, skip_hosts_hash = load_tags(options)
#tag_host_hash = deep_invert(host_tag_hash)

# Invert host_tag_hash (and omit skipped hosts) to get tag => host mappings
tag_host_hash = {}
host_tag_hash.each do |h, v|
  v.each do |t|
    next if skip_hosts_hash[h] && t != 'SKIP'
    tag_host_hash[t] ||= []
    tag_host_hash[t].push(h)
  end
end

# Load into redis
write_hash_to_redis(r, 'host', host_tag_hash, options)
write_hash_to_redis(r, 'tag',  tag_host_hash, options)

# Add ALL entries
if not host_tag_hash.empty?
  host_tag_hash.each_key do |k| 
    r.sadd(r.get_key("all_hosts"), k)
    next if skip_hosts_hash[k]
    r.sadd(r.get_key("all_hosts_noskip"), k)
  end
end
if not tag_host_hash.empty?
  tag_host_hash.each_key do |k| 
    r.sadd(r.get_key("all_tags"), k)
    next if k == 'SKIP'
    r.sadd(r.get_key("all_tags_noskip"), k)
  end
end

# Force a flush to disk
r.save;

