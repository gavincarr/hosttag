#!/usr/bin/ruby
#
# hosttag query client
#
# Usage:
#   ht <tag>
#
#   ht [-a] <tag1> <tag2>           Show hosts with tag1 AND tag2 (intersection, default)
#   ht -o <tag1> <tag2>             Show hosts with tag1 OR  tag2 (union)
#
#   ht -A                           Show all hosts
#
#   ht -t <host>                    Show tags on 'host'
#   ht -t [-o] <host1> <host2>      Show tags on 'host' OR  'host2' (union, default)
#   ht -t -a <host1> <host2>        Show tags on 'host' AND 'host2' (intersection)
#
#   ht -T                           Show all tags
#

require 'optparse'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'hosttag'
include Hosttag

# -------------------------------------------------------------------------
# Functions

def die(error)
  warn error
  exit 1
end

def usage(opts, msg = nil)
  if msg
    warn msg
    $stderr.puts
  end
  warn opts
  exit
end

def render(result, options, arg = nil)
  # Report
  if options[:list]
    puts "#{arg}: #{result.sort.join(' ')}"
  else
    puts result.sort.join(options[:join])
  end
end

# -------------------------------------------------------------------------
# Main

options = { :join => ' ' }

opts = OptionParser.new
opts.banner = "Usage: hosttag [options] <tag> [<tag2>...]"
opts.on('-?', '-h', '--help') do
  puts opts
  exit
end
opts.on('-a', '--and', 'Report hosts with ALL the given tags (AND result sets)') do
  options[:rel] = :and
end
opts.on('-o', '--or',  'Report hosts with ANY of the given tags (OR result sets)') do
  options[:rel] = :or
end
opts.on('-l', '--list', "List hosts/tags separately for each tag/host") do
  options[:list] = 1
end
opts.on('-t', '--tag', '--tags', "Tag mode: report tags for the given hosts") do
  options[:type] = :host
end
opts.on('-A', '--all', 'Report all hosts') do
  if not options[:all]
    options[:all] = :hosts
  elsif options[:all] == :hosts
    options[:include_skip?] ||= true
  else
    usage(opts, "Error: can't specify both -A/--all-hosts and -T/--all-tags")
  end
end
opts.on('-T', '--all-tags', 'Report all tags') do
  if not options[:all]
    options[:all] = :tags
  elsif options[:all] == :tags
    options[:include_skip?] ||= true
  else
    usage(opts, "Error: can't specify both -A/--all-hosts and -T/--all-tags")
  end
end
opts.on('-1', 'List one item per line') do
  options[:one] = 1
  options[:join] = "\n"
end
opts.on('-d', '--delimiter=STR', String, 'Delimiter for reporting (default " ")') do |val|
  options[:join] = val
end
opts.on('-s=ARG', '--server=ARG', String, 'Server hostname to connect to. Default: hosttag') do |val|
  options[:server] = val
end
opts.on('-p=ARG', '--port=ARG', Integer, 'Server port to connect to') do |val|
  options[:port] = val
end
opts.on('--ns=STR', '--namespace=STR', String, 'Namespace into which we load hosttag data. Default: hosttag') do |val|
  options[:namespace] = val
end
opts.on('-v', '--verbose', 'Verbose output') do
  options[:verbose] = true
end

# Parse options
begin
  args = opts.parse(ARGV) 
rescue => e
  usage(opts, "Error: " << e)
end

# Sanity checks
if args.length == 0 and not options[:all]
  usage(opts) 
end
if args.length > 0 and options[:all]
  if options[:all] == :hosts
    error = "Error: can't specify hosts with -A/--all-hosts"
  else
    error = "Error: can't specify tags with -T/--all-tags"
  end
  usage(opts, error) 
end
if options[:list] and options[:one]
  usage(opts, "Warning: -L/--list and -1 are incompatible")
end 
if options[:list] and options[:all]
  usage(opts, "Warning: -L/--list and -A/--all-hosts/-T/--all-tags are incompatible")
end 

# All request
if options[:all]
  if options[:all] == :hosts
    render hosttag_all_hosts(options), options
  else
    render hosttag_all_tags(options), options
  end

# Standard request
else
  # In list mode, process all args separately; otherwise, do them all at once
  if options[:list]
    arg_list = args
  else
    arg_list = [ args ]
  end

  arg_list.each do |a|
    begin
      results = hosttag_lookup(a, options)
      render results, options, a
    rescue => e
      warn e
    end
  end
end

